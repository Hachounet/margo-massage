---
import massages from '../data/massages.json';
import { Picture } from 'astro:assets';

import massageCalifornian from "../assets/images/massage-californian.jpg";
import massageAmma from "../assets/images/massage-amma.avif";
import massageCustom from "../assets/images/massage-custom.avif";
import massageSwedish from "../assets/images/massage-custom.avif";

import lotusIcon from "../assets/images/icons/lotus-svgrepo-com.svg";
import stonesIcon from "../assets/images/icons/stones-svgrepo-com(1).svg"
import massageIcon from "../assets/images/icons/massage-svgrepo-com.svg";
import massageIcon2 from "../assets/images/icons/massage-svgrepo-com(1).svg"

const localImages = {
  'massage-californian.jpg': massageCalifornian,
  'massage-amma.avif': massageAmma,
  'massage-custom.avif': massageCustom,
  'massage-swedish.avif': massageSwedish,
}

const localIcons = {
  'lotus-svgrepo-com.svg': lotusIcon,
  'stones-svgrepo-com(1).svg': stonesIcon,
  'massage-svgrepo-com.svg': massageIcon,
  'massage-svgrepo-com(1).svg': massageIcon2,
}

const { h1Choice } = Astro.props;
---

<!-- ============================================ --><!--                  Services                    --><!-- ============================================ -->
<section id="services-447">
  <div class="cs-container">
    <div class="cs-content">
       {h1Choice === true ? (
                <h1 class="cs-topper">Présentation des différents massages</h1>
              ) : (
                <span class="cs-topper">Présentation des différents massages</span>
              )}
     
      <h2 class="cs-title">Des massages relaxants, détoxs et ciblés</h2>
      <p class="cs-text">
        Parce que chaque personne est unique et que vous méritez une détente
        complète, voici les différents massages que je vous propose.
      </p>
    </div>
    <ul class="cs-card-group">
      {
        massages.map((item) => {
          let imageSrc = localImages[item.image];
          let iconSrc = localIcons[item.icon];
          return (
            <li class="cs-item">
              <div class="cs-box">
                <Picture 
                pictureAttributes={{
                  class: "cs-wrapper",
                }}
                class={"cs-icon"}
                src={iconSrc}
                alt={"icon"}
                loading={"lazy"}
                decoding={"async"}
                aria-hidden="true"
                />
               
                <h3 class="cs-h3">{item.name}</h3>
                <p class="cs-item-text cu-font-nexa">{item.text}</p>
                <a
                  href={item.link}
                  class="cs-link cu-font-nexa"
                >
                  En savoir plus
                </a>
              </div>

              <Picture
              pictureAttributes={{
                class: "cs-picture",
              }}
              src={imageSrc}
              alt={item.altImgDescription}
              formats={["avif", "webp", "jpeg"]}
              loading={"lazy"}
              decoding={"async"}
              aria-hidden="true" />

              
            </li>
          );
        })
      }
    </ul>
  </div>
</section>

<style>
  /*-- -------------------------- -->
<---          Services          -->
<--- -------------------------- -*/

  /* Mobile - 360px */
  @media only screen and (min-width: 0rem) {
    #services-447 {
      padding: var(--sectionPadding);
    }
    #services-447 .cs-container {
      width: 100%;
      /* changes to 1440px at tablet */
      max-width: 34.375em;
      margin: auto;
    }
    #services-447 .cs-container {
      width: 100%;
      /* changes to 1440px at tablet */
      max-width: 34.375em;
      margin: auto;
      display: flex;
      flex-direction: column;
      align-items: center;
      /* 48px - 64px */
      gap: clamp(3rem, 6vw, 4rem);
    }
    #services-447 .cs-content {
      /* set text align to left if content needs to be left aligned */
      text-align: center;
      width: 100%;
      display: flex;
      flex-direction: column;
      /* centers content horizontally, set to flex-start to left align */
      align-items: center;
    }

    #services-447 .cs-card-group {
      width: 100%;
      padding: 0;
      margin: 0;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 1.5rem;
    }
    #services-447 .cs-item {
      list-style: none;
      width: 100%;
      /* changes at desktop */
      padding-top: 9rem;
      position: relative;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
    #services-447 .cs-item:hover .cs-picture img {
      transform: scale(1.1);
      opacity: 0.3;
    }
    #services-447 .cs-item:hover .cs-box:before {
      opacity: 1;
    }
    #services-447 .cs-picture {
      width: 100%;
      /* changes at desktop */
      height: 15.625rem;
      border-radius: 0.5rem;
      background-color: var(--primary);
      /* clips the corners of the image */
      overflow: hidden;
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      z-index: -1;
    }
    #services-447 .cs-picture img {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
      /* makes it behave like a background image */
      object-fit: cover;
      /* positions top of image to the top of the container */
      object-position: top;
      transition:
        transform 0.9s,
        opacity 0.5s;
    }
    #services-447 .cs-box {
      text-align: center;
      width: 88%;
      
      padding: 0 1.5rem 1.5rem 1.5rem;
      /* prevents padding and border from affecting height and width */
      box-sizing: border-box;
      border: 1px solid #dad9e3;
      border-radius: 0.75rem;
      background-color: #fff;
      box-shadow: 0px 24px 54px rgba(87, 107, 147, 0.12);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      position: relative;
    }
    #services-447 .cs-box:before {
      /* hover border box */
      content: '';
      background: transparent;
      /* prevents the mouse from interacting with it */
      pointer-events: none;
      border: 4px solid var(--primary);
      border-radius: 0.75rem;
      /* prevents border from affecting height and width */
      box-sizing: border-box;
      opacity: 0;
      position: absolute;
      display: block;
      top: -1px;
      left: -1px;
      right: -1px;
      bottom: -1px;
      transition: opacity 0.5s;
    }
    #services-447 .cs-wrapper {
      /* 80px - 120px */
      width: clamp(5rem, 9.2vw, 7.5rem);
      height: clamp(5rem, 9.2vw, 7.5rem);
      /* 20px - 24px */
      margin: 0 0 clamp(1.25rem, 1.5vw, 1.5rem);
      /* we use the same clamp value for height & width, but multiple by -.5 so it will be a negative value, and be half of the height.  Negative margins pull things toward the element so they overlap them, in this case we want the .cs-wrapper to overlap .cs-box by half its height, so we use the same clamp for height and half it for the margin top value */
      margin-top: calc(clamp(5rem, 9.2vw, 7.5rem) * -0.5);
      border-radius: 50%;
      border: 4px solid var(--primary);
      background-color: #fff;
      /* prevents border from affecting height and width */
      box-sizing: border-box;
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
      z-index: 10;
    }
    #services-447 .cs-icon {
      /* 48px - 64px */
      width: clamp(7rem, 4.3vw, 4rem);
      height: auto;
      display: block;
    }
    #services-447 .cs-h3 {
      /* 20px - 25px */
      font-size: clamp(1.25rem, 1.9vw, 1.5625rem);
      line-height: 1.2em;
      font-weight: 700;
      margin: 0 0 0.5rem 0;
      color: var(--headerColor);
    }
    #services-447 .cs-item-text {
      /* 14px - 16px */
      font-size: clamp(0.875rem, 1.5vw, 1rem);
      line-height: 1.5em;
      font-weight: 400;
      /* 20px - 24px */
      margin: 0 0 clamp(1.25rem, 1.5vw, 1.5rem);
      color: var(--bodyTextColor);
    }
    #services-447 .cs-link {
      /* 16px - 20px */
      font-size: clamp(1rem, 1.5vw, 1.25rem);
      line-height: 1.5em;
      font-weight: 700;
      text-transform: uppercase;
      text-decoration: none;
      margin: 0;
      color: var(--primary);
      display: inline-block;
      position: relative;
    }
    #services-447 .cs-link:hover:before {
      width: 100%;
    }
    #services-447 .cs-link:before {
      /* animated underline */
      content: '';
      width: 0%;
      height: 3px;
      background: currentColor;
      opacity: 1;
      position: absolute;
      display: block;
      bottom: -0.125rem;
      left: 0;
      transition: width 0.3s;
    }
  }
  /* Tablet - 768px */
  @media only screen and (min-width: 48rem) {
    #services-447 .cs-container {
      max-width: 90rem;
    }
    #services-447 .cs-card-group {
      flex-wrap: wrap;
      flex-direction: row;
      /* 16px - 20px */
      column-gap: clamp(1rem, 1.5vw, 1.25rem);
      row-gap: 3.75rem;
    }
    #services-447 .cs-item {
      width: 47%;
    }
  }
  /* Small Desktop - 1024px */
  @media only screen and (min-width: 64rem) {
    #services-447 .cs-card-group {
      flex-wrap: nowrap;
    }
    #services-447 .cs-item {
      width: 100%;
      /* 144px - 274px */
      padding-top: clamp(9rem, 17.5vw, 17.125rem);
    }
    #services-447 .cs-picture {
      /* 224px - 428px */
      height: clamp(14rem, 28vw, 26.75rem);
    }
  }
  /* Dark Mode */
  @media only screen and (min-width: 0rem) {
    body.dark-mode #services-447 .cs-topper {
      color: var(--primaryLight);
    }
    body.dark-mode #services-447 .cs-title {
      color: var(--bodyTextColorWhite);
    }
    body.dark-mode #services-447 .cs-text {
      color: var(--bodyTextColorWhite);
      opacity: 0.8;
    }
    body.dark-mode #services-447 .cs-box,
    body.dark-mode #services-447 .cs-wrapper {
      background-color: var(--medium);
    }
    body.dark-mode #services-447 .cs-icon {
      /* Removed because was turning icon white */
    }
    body.dark-mode #services-447 .cs-h3,
    body.dark-mode #services-447 .cs-item-text {
      color: var(--bodyTextColorWhite);
    }
    body.dark-mode #services-447 .cs-link {
      color: var(--primaryLight);
    }
  }
</style>
